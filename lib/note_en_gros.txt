
🏃‍♀️‍➡️
💁:    bon je te fais un recap de tout c que j ai fais, 
"👾 Voici un récapitulatif clair et structuré de tout ce qui a été fait jusqu’à présent dans ton projet Flutter “FoodMarket”, depuis l’installation jusqu’au splash screen :
🧙‍♂️1er jour 
    ⸻

    🧰 Installation et configuration

    ✔️ Environnement de développement
        •	Installation de Flutter + Dart sur macOS
        •	Installation de Android Studio (avec émulateur Android fonctionnel)
        •	Installation de Xcode (pour support iOS)
        •	Installation de CocoaPods
        •	Résolution de problèmes liés à Ruby / Pod / PATH
        •	Vérification avec flutter doctor

    ✔️ Flutter desktop et web
        •	Activation du support macOS : flutter config --enable-macos-desktop
        •	Projet Flutter détecte maintenant : Android, macOS, et Chrome

    ⸻

    📁 Structure du projet
        •	Création du projet food_app
        •	Ajout de fichiers dans lib/ :
        •	main.dart (point d’entrée principal)
        •	widgets_lab.dart (pour tester les widgets Flutter)
        •	brouillon.dart (espace libre d’expérimentation)

    ⸻

    🧪 Tests & compréhension Flutter

    ✔️ Widgets fondamentaux testés :
        •	StatelessWidget, StatefulWidget
        •	Row, Column, Container, Text, Icon
        •	GestureDetector, Expanded, Flexible, SizedBox, etc.

    ✔️ Concepts compris :
        •	Widgets = blocs de construction UI (comme en React Native)
        •	Hot reload vs Hot restart
        •	Structure du main.dart (via MaterialApp, Scaffold, build())

    ⸻

    🧑‍💻 Utilisation de GitHub 💥 mais bon jai abondonner c est chiant (kayn hein mais il est pas a jour)
        •	Création du repo : flutter-order-app
        •	Push initial depuis terminal
        •	Création d’une branche dédiée test-widgets
        •	Navigation entre branches (git checkout test-widgets, git checkout main)

    ⸻

    🎨 Début de la maquette Figma

    ✔️ Pages observées :
        •	Splash (logo + nom FoodMarket)
        •	Sign In
        •	Sign Up
        •	Sign Up + Photo

    ✔️ Couleurs & branding :
        •	Fond rouge #FF002B
        •	Logo blanc (nom + icône de magasin)
        •	Style moderne, épuré

    ⸻

    🖼️ Ajout du logo FoodMarket
        •	Création du dossier assets/images
        •	Ajout de l’image logo.png
        •	Configuration dans pubspec.yaml :

    flutter:
    assets:
        - assets/images/logo.png


        •	Affichage du logo et texte sur un SplashScreen personnalisé via Image.asset() + Text()

    " 🧍‍♀️ voila ça c etait step 1 : instalations


---------------------------------------------------------------------------------------------
🫸definition🫷 🌝 :
    🧩 Un widget, c’est quoi en Flutter ? 🧙‍♂️

    Un widget est l’unité de base de l’interface utilisateur (UI) dans Flutter.

    Tout ce que tu vois à l’écran dans une app Flutter est un widget :
        •	Un Text est un widget
        •	Un Container est un widget
        •	Un Row, Column, Button, Image, Scaffold, etc. → tous des widgets

    👾"C’est comme du LEGO UI : tu construis ton écran en combinant des widgets."
------------------

EXAMPLE-widget (step2)🧞:
    Excellent choix, voici une explication claire et un exemple minimal pour chacun des widgets que tu as listés.

    ⸻

    ✅ 1. StatelessWidget
        •	Définition : Widget immuable, ne change jamais une fois construit.

    class MyText extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
        return Text("Je ne change jamais");
    }
    }


    ⸻

    ✅ 2. StatefulWidget
        •	Définition : Widget avec un état interne qui peut changer.

    class CounterWidget extends StatefulWidget {
    @override
    State<CounterWidget> createState() => _CounterWidgetState();
    }

    class _CounterWidgetState extends State<CounterWidget> {
    int count = 0;

    @override
    Widget build(BuildContext context) {
        return ElevatedButton(
        onPressed: () => setState(() => count++),
        child: Text("Compteur: $count"),
        );
    }
    }


    ⸻

    ✅ 3. Row
        •	Définition : Dispose ses enfants horizontalement.

    Row(
    children: [
        Icon(Icons.star),
        Text("5 étoiles"),
    ],
    )


    ⸻

    ✅ 4. Column
        •	Définition : Dispose ses enfants verticalement.

    Column(
    children: [
        Text("Ligne 1"),
        Text("Ligne 2"),
    ],
    )


    ⸻

    ✅ 5. SizedBox
        •	Définition : Crée un espacement ou une boîte de taille fixe.

    SizedBox(height: 16),


    ⸻

    ✅ 6. Container
        •	Définition : Boîte multifonction : padding, margin, background, border…

    Container(
    padding: EdgeInsets.all(16),
    color: Colors.red,
    child: Text("Contenu"),
    )


    ⸻

    ✅ 7. SingleChildScrollView
        •	Définition : Rend un enfant scrollable.

    SingleChildScrollView(
    child: Column(
        children: [Text("Loooooong contenu...")],
    ),
    )


    ⸻

    ✅ 8. Padding
        •	Définition : Ajoute de l’espace interne autour d’un widget.

    Padding(
    padding: EdgeInsets.all(16),
    child: Text("Avec du padding"),
    )


    ⸻

    ✅ 9. Align
        •	Définition : Positionne un enfant selon un alignement.

    Align(
    alignment: Alignment.bottomRight,
    child: Text("En bas à droite"),
    )


    ⸻

    ✅ 10. Text
        •	Définition : Affiche une chaîne de caractères.

    Text("Ceci est un texte"),


    ⸻

    ✅ 11. Icon
        •	Définition : Affiche une icône du Material Design.

    Icon(Icons.favorite, color: Colors.red),


    ⸻

    ✅ 12. Stack
        •	Définition : Superpose les widgets (comme des calques).

    Stack(
    children: [
        Image.asset("fond.jpg"),
        Positioned(
        bottom: 20,
        right: 20,
        child: Text("En haut de l’image"),
        ),
    ],
    )


    ⸻

    ✅ 13. Positioned
        •	Définition : Doit être utilisé dans un Stack, positionne précisément un enfant.

    Positioned(
    top: 10,
    left: 10,
    child: Text("Placée en haut à gauche"),
    )


    ⸻

    ✅ 14. GestureDetector
        •	Définition : Capture des gestes (tap, double tap, drag, etc.)

    GestureDetector(
    onTap: () => print("Appuyé"),
    child: Container(color: Colors.blue, height: 100, width: 100),
    )


    ⸻

    ✅ 15. Expanded
        •	Définition : Remplit l’espace restant dans un Row/Column.

    Row(
    children: [
        Expanded(child: Container(color: Colors.red)),
        Container(width: 50, color: Colors.green),
    ],
    )


    ⸻

    ✅ 16. Flexible
        •	Définition : Semblable à Expanded mais plus souple (peut ne pas remplir tout l’espace).

    Flexible(
    flex: 2,
    child: Container(color: Colors.blue),
    )


    ⸻

    ✅ 17. Navigator.push
        •	Définition : Permet de naviguer vers une autre page.

    Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => AnotherScreen()),
    );


    ⸻



---------------------------------------------------------------------------------------------
🧙‍♂️❕REMARQUE: ça a pas marche avec xcode , faut attendre un wifi stable 🫷-_-🫸




---------------------------------------------------------------------------------------------
🧙‍♂️ : RECAP STEP2 
    👾:⸻

    🔁 RÉCAPITULATIF COMPLET DU FLOW UTILISATEUR

    ⸻

    🧱 STRUCTURE TECHNIQUE

    Dossier lib/ contient :🌳

    lib/
    ├── main.dart                  🔁 Point d’entrée + routing
    ├── screens/                  📱 Tous les écrans
    │   ├── splash_screen.dart      🔸 Logo FoodMarket + redirection
    │   ├── sign_in_screen.dart     🔸 Connexion
    │   ├── sign_up_screen.dart     🔸 Inscription
    │   └── home_screen.dart        🔸 Écran d’accueil final
    ├── widgets/
    │   └── custom_text_field.dart  🔹 Champ formulaire réutilisable
    └── note-en-gros.txt          📝 Tes remarques perso

    ⸻

    ⚙️ COMPORTEMENT LOGIQUE

    1. main.dart
        •	Configure l’app
        •	Déclare les routes (/home)
        •	Définit le point de départ : SplashScreen

    home: const SplashScreen(),
    routes: {
    '/home': (context) => const HomeScreen(),
    }


    ⸻

    2. splash_screen.dart
        •	Affiche logo.png + texte
        •	Attends 2 secondes
        •	Redirige automatiquement vers SignInScreen

    Future.delayed(Duration(seconds: 2), () {
    Navigator.pushReplacement(... SignInScreen());
    });


    ⸻

    3. sign_in_screen.dart
        •	UI pour se connecter
        •	Lien “Create an account” ➡️ va vers SignUpScreen
        •	Pas encore connecté à une vraie base (Firebase)

    ⸻

    4. sign_up_screen.dart
        •	UI d’inscription (nom, email, mot de passe)
        •	Bouton “Continue” redirige vers /home
        •	Utilise CustomTextField

    Navigator.pushReplacementNamed(context, '/home');


    ⸻

    5. home_screen.dart
        •	Écran d’accueil
        •	Montre texte “Bienvenue”
        •	Pour l’instant statique → servira de point d’entrée post-login plus tard

    ⸻

    6. custom_text_field.dart
        •	Widget pour ne pas dupliquer le code des champs
        •	Reçoit un label, un hint, et un booléen obscure

    ⸻

    ✅ EN RÉSUMÉ

    Tu as construit une app Flutter multi-écrans avec navigation complète :

    Splash → SignIn → SignUp → Home

    Et tout repose sur :
    🧱 Widgets + Navigation + Routage propre

    ⸻


---------------------------------------------------------------------------------------------




#🧙‍♂️ recap du deuxieme jour:

    ⸻

    📦 Structure actuelle du projet 🌳


    🧙‍♂️🫸l instant l arbre : lib/
                            ├── main.dart
                            ├── core/
                            │   └── models/
                            │       └── restaut.dart           ✅ Modèle de restaurant
                            ├── screens/
                            │   ├── splash_screen.dart         ✅ Affichage initial (logo)
                            │   ├── sign_in_screen.dart        ✅ Écran de connexion
                            │   ├── sign_up_screen.dart        ✅ Écran d’inscription
                            │   ├── home_screen.dart           ✅ Accueil avec bouton pour voir les restaurants
                            │   ├── restaut_list_screen.dart   ✅ Liste des restaurants
                            │   └── restaut_detail_screen.dart ✅ Détails d’un restaurant sélectionné
                            ├── widgets/
                            │   └── custom_text_field.dart     ✅ Champ de texte réutilisable
                            └── note-en-gros.txt               ✅ (fichier de notes personnelles)



    ⸻

    🧱 Fonctionnalités principales

    Fonction	                Description
    SplashScreen	            Affiche le logo + nom pendant 2s avant d’aller vers l’écran de connexion
    SignInScreen	            Formulaire de connexion (visuel uniquement)
    SignUpScreen	            Formulaire d’inscription (visuel uniquement)
    HomeScreen	                Affiche un bouton pour accéder à la liste des restaurants
    RestautListScreen	        Affiche une liste de restaurants avec image, nom, note et prix
    RestautDetailScreen	        Montre les détails complets du restaurant sélectionné
    CustomTextField	            Widget personnalisé pour styliser les champs de texte


    ⸻

    🛠️ Techniques utilisées
        •	✅ Navigation Flutter via Navigator.push et pushReplacement
        •	✅ MaterialApp avec routes nommées
        •	✅ Utilisation de ListView.builder pour une liste dynamique
        •	✅ Passage de données entre écrans (objet Restaut)
        •	✅ Modèle Restaut avec image, nom, description, rating et prix
        •	✅ Structure scalable pour ajouter facilement du state management (Bloc, etc.)

    ⸻
    ***
    🧪 Prochaines pistes
        •	Intégrer un vrai backend ou base de données
        •	Ajouter un écran de commande (order_screen.dart)
        •	Implémenter la gestion des états avec BLoC
        •	Gérer l’authentification réelle (Firebase par exemple)
        •	Ajouter des images locales et une meilleure gestion des assets
    ***
    ⸻ EN GROS LE backend


---------------------------------------------------------------------------------------------
🫸definition🫷 🌝
    Le backend désigne tout ce qui se passe côté serveur, 
    en arrière-plan d’une application. C’est l’ensemble des outils, bases de données, APIs, logiques métier qui font fonctionner ton application mais que l’utilisateur ne voit pas directement.
    En gros:
     "Le backend, c’est le cerveau de ton application. Il traite les données, applique la logique métier, et fournit les résultats à l’interface utilisateur (le frontend, ici Flutter)."

    ‼️"la gestion de la base de donnéesfait entièrement partie du backend"⁉️

Etape3 : la gestion de la base de données .
	1.	Vérifie si l’email existe déjà.
	2.	Hash le mot de passe.
	3.	Stocke les infos dans la base de données.


👾❕REMARQUE:
    Quand un fichier apparaît en vert dans Visual Studio Code (VS Code), cela signifie généralement que :

    👉 Le fichier est nouveau (ajouté récemment) et non encore validé (commité) dans Git.

    Détail :
        •	VS Code utilise des couleurs pour refléter l’état Git d’un fichier :
        •	🟢 Vert : fichier ajouté mais pas encore commité (git add, mais pas encore git commit)
        •	🟡 Jaune/orange (ou U pour “Untracked”) : fichier non suivi par Git (tu ne l’as pas encore fait git add)
        •	🔵 Bleu : fichier modifié (déjà dans Git, mais son contenu a changé depuis le dernier commit)
        •	❌ Rouge (rare) : fichier supprimé

    Que faire si tu veux qu’il ne soit plus vert :
        1.	Tu fais :

    git add nom_du_fichier
    git commit -m "Ajout du fichier"

    ou dans l’interface Git de VS Code, tu peux staguer et commiter le fichier via l’onglet “Source Control”.

---------------------------------------------------------------------------------------------

3 eme jour,
    j avais reussi a ouvrir le simulateur apple , genre un iphone , (wlh j ai meme une video) mais j ai oublier de noté comment j avais fait ducoup j ai oublier et 
    j ai perdu le simulateur ios, des que je trouve comment je note directement
    
---------------------------------------------------------------------------------------------
🧙‍♂️🫸l instant l arbre : lib/
                        ├── core/
                        │   ├── bloc/
                        │   ├── cart_repository.dart     ✅ LOGIQUE DE PANIER
                        │   └── models/
                        │       ├── cart_item.dart       ✅ MODÈLE ITEM PANIER
                        │       └── restaut.dart
                        ├── screens/
                        │   ├── cart_screen.dart         ✅ NOUVELLE PAGE PANIER
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart         ✅ NAVIGATION BOTTOM
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart ✅ AJOUT PANIER
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   └── success_sign_up_screen.dart
                        ├── widgets/
                        │   └── custom_text_field.dart
                        ├── main.dart
                        └── note_en_gros.txt



---------------------------------------------------------------------------------------------


4 eme jour 🙂‍↕️
    ⸻

    ✅ 1. Gestion du Profil avec Avatar
        •	Implémentation de 3 choix pour l’image de profil :
        •	📸 Prendre une photo (caméra)
        •	🖼️ Choisir depuis la galerie
        •	🧑‍🎨 Choisir une icône par défaut
        •	Stockage temporaire de l’image ou de l’icône dans l’état local.

    ⸻

    ✅ 2. Permissions iOS

    Ajout des permissions nécessaires dans ios/Runner/Info.plist :

    <key>NSCameraUsageDescription</key>
    <string>Besoin d’accéder à la caméra pour prendre une photo de profil</string>
    <key>NSPhotoLibraryUsageDescription</key>
    <string>Besoin d’accéder à la galerie pour choisir une photo</string>


    ⸻

    ✅ 3. CartRepository (panier global)
        •	Création d’un CartRepository avec ChangeNotifier.
        •	Ajout/suppression de plats dans le panier.
        •	Suivi du nombre total d’articles.

    ⸻

    ✅ 4. Provider pour le panier
        •	Ajout du package provider: ^6.0.0 dans pubspec.yaml.
        •	Wrappé ton FoodMarketApp avec ChangeNotifierProvider<CartRepository> dans main.dart.

    ⸻

    ✅ 5. Notification sur l’icône du panier
        •	Mise en place d’un badge rouge (🔴) quand des articles sont dans le panier et que l’utilisateur n’a pas encore consulté l’onglet Cart.
        •	Disparition automatique du badge dès que l’utilisateur ouvre l’onglet Cart.

    ⸻

    ✅ 6. Mise à jour dynamique du badge
        •	Ajout d’un listener sur CartRepository dans MainScreen pour détecter toute modification du panier.
        •	Si une modification est détectée et que l’utilisateur n’est pas dans Cart, alors hasNew = true.

    ⸻

    ✅ 7. Correction de bugs
        •	Correction de :
        •	Erreurs de syntaxe dans pubspec.yaml (clé dupliquée, indentation).
        •	Mauvais import de CartRepository.
        •	Mauvais usage du mot-clé const.
        •	Suppression d’un cclass → class.
        •	Nettoyage de build.gradle.kts pour le NDK version.

    ⸻

    ✅ 8. Navigation et Structure
        •	Écran principal MainScreen avec BottomNavigationBar :
        •	🏬 Order
        •	🛒 Cart
        •	👤 Profile

    ⸻

    Si tu veux, je peux maintenant t’aider à :
        •	Persister les données du panier localement
        •	Envoyer les commandes à un backend
        •	Ajouter des animations ou un onboarding
        •	Ajouter Firebase / authentification
        •	Améliorer la structure du projet avec un Service Layer

    
---------------------------------------------------------------------------------------------

Dimanche 🧍‍♀️

    👾
    Voici un récapitulatif complet de ce que nous avons mis en place jusqu’à présent dans ton application Flutter :

    ⸻

    ✅ 1. Ajout d’images locales & mapping
    •	Ajout de multiples images dans assets/images/ (pizza, tacos, sushi, etc.)
    •	Configuration dans pubspec.yaml
    •	Fonction _mapToAssetImage(String) qui associe dynamiquement le nom du plat à une image locale

    ⸻

    ✅ 2. Écran de panier (CartScreen)
    •	Affiche dynamiquement les items du panier (quantité + image + nom + prix)
    •	Boutons + et - pour ajuster la quantité
    •	Si vide : illustration + message “Your cart is empty!”

    ⸻

    ✅ 3. Checkout avec formulaire
    •	Appui sur Checkout ouvre une modale avec champs à remplir :
    •	Méthode de paiement (Carte ou Espèces)
    •	Adresse / point de rendez-vous
    •	Si tout est rempli → bouton “Valider la commande”
    •	Redirection automatique vers l’écran TrackingScreen après validation

    ⸻

    ✅ 4. Commande et tracking
    •	Lors de la validation, une instance Order est créée avec :
    •	nom du plat
    •	quantité totale
    •	prix total
    •	image locale associée
    •	status: OrderStatus.inProgress
    •	Redirection vers TrackingScreen (affiche état de la commande)

    ⸻

    ✅ 5. Profil utilisateur
    •	Page ProfileScreen avec :
    •	Modification de nom et email
    •	Choix d’une photo de profil (depuis caméra, galerie ou icône)
    •	Onglet FoodMarket (infos légales, logout)
    •	Bouton “Ajouter une carte” → AddCardScreen (à créer)

    ⸻

    ✅ 6. Structure et gestion d’état
    •	Architecture claire avec Provider pour CartRepository
    •	Séparation des modèles (Restaut, Order, CartItem)
    •	Navigation propre avec MaterialPageRoute

    ⸻

 lib


🧙‍♂️🫸l instant l arbre : lib/
                        ├── core
                        │   ├── bloc
                        │   ├── cart_repository.dart. <----(on va le supprimer💥)
                        │   ├── models
                        │   │   ├── cart_item.dart
                        │   │   ├── order.dart
                        │   │   └── restaut.dart
                        │   └── order_repository.dart
                        ├── main.dart
                        ├── note_en_gros.txt
                        ├── screens
                        │   ├── add_card_screen.dart
                        │   ├── cart_screen.dart
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart
                        │   ├── order_screen.dartÒ
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   ├── success_sign_up_screen.dart
                        │   └── tracking_screen.dart
                        └── widgets
                            └── custom_text_field.dart

---------------------------------------------------------------------------------------------
on a mis en place une autre disposition pour gerer le backend
    	•	📦 core/bloc/cart → Architecture propre pour la gestion d’état du panier (Bloc + Event + State)
	•	📦 core/models → Modèles clairs et bien organisés (cart_item, restaut, order)
	•	📱 screens/ → Toutes les pages de l’app bien séparées et modulables
	•	🧠 Tu n’as plus de CartRepository dans ton arborescence, ce qui est cohérent vu que la logique est gérée via CartBloc.


🧙‍♂️🫸l instant l arbre : lib
                        ├── core
                        │   ├── bloc
                        │   │   └── cart <---   # ( 🧙‍♂️ 🧠 remplace cart_repository )
                        │   │       ├── cart_bloc.dart
                        │   │       ├── cart_event.dart
                        │   │       └── cart_state.dart
                        │   ├── models
                        │   │   ├── cart_item.dart
                        │   │   ├── order.dart
                        │   │   └── restaut.dart
                        │   └── order_repository.dart
                        ├── main.dart
                        ├── note_en_gros.txt
                        ├── screens
                        │   ├── add_card_screen.dart
                        │   ├── cart_screen.dart
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   ├── success_sign_up_screen.dart
                        │   └── tracking_screen.dart
                        └── widgets
                            └── custom_text_field.dart

Prédictions 🔮 :
    📍 Étapes suivantes possibles (prédiction) :
        1.	🧠 Persistance locale du panier (hydrated_bloc ou shared_preferences)
        2.	🛠 Tests unitaires du CartBloc
        3.	🌍 Internationalisation (i18n) si tu veux gérer plusieurs langues
        4.	📲 Backend/API : communication avec un vrai serveur pour les commandes
        5.	🔒 Auth sécurisée avec token + gestion session
        6.	💳 Paiement réel via Stripe, PayPal, etc.

---------------------------------------------------------------------------------------------

Un récapitulatif  chronologique de tout ce que qu'on a mis en place depuis qu'on a supprimé le cart_repository:
👾
    ⸻

    🔁 1. Refactorisation initiale de la logique panier (Cart)
        •	Suppression de cart_repository.
        •	Mise en place d’un BLoC pattern :
        •	cart_bloc.dart → logique des événements (AddItem, RemoveItem, etc.)
        •	cart_event.dart → définition des événements.
        •	cart_state.dart → structure avec List<CartItem>, orderSuccess, totalPrice, etc.
        •	Tous les écrans interagissent via BlocBuilder / BlocProvider.

    ⸻

    🍽️ 2. Problème avec la gestion des restaurants ; # (🧙‍♂️ en gros c est chiant)
        •	Les restos étaient dupliqués en dur dans plusieurs fichiers :
        •	restaut_list_screen.dart
        •	cart_bloc.dart (via CartItem)
        •	restaut_detail_screen.dart
        •	Inconvénient : maintenance pénible, erreurs potentielles, pas scalable.

    ⸻

    💡 3. Objectif : Centraliser les restos ; # ( 🧙‍♂️ moins chiant 😌 meme plpus simple pour la suite)
        •	Création d’un fichier unique de référence : restaurant_data.dart.
        •	Création du RestaurantRepository.dart qui expose :
        •	getAllRestaurants()
        •	getByName(name)
        •	Suppression des listes de restos codées à la main dans les écrans.

    ⸻

    📂 4. Migration vers une base de données JSON ; # ( 🧙‍♂️ utiliser souvent pour lire les données🫸🌝🫷 )
        •	Création du fichier : assets/data/restaurants.json
    → Liste complète des restaurants (nom, prix, image, etc.)
        •	Déplacement de la lecture dans RestaurantRepository :

    final data = await rootBundle.loadString(...);
    final List<dynamic> jsonList = json.decode(data);
    return jsonList.map((e) => Restaut.fromJson(e)).toList();

        •	pubspec.yaml : <--- mis à jour 
                assets:
                - assets/data/restaurants.json
                - assets/images/



    ⸻

    🧩 5. Connexion JSON aux widgets  # ( 🧙‍♂️ faus bien les lire ces données )
        •	restaut_list_screen.dart utilise un FutureBuilder pour charger dynamiquement les restos depuis le repo.
        •	restaut_detail_screen.dart passe les données de manière déclarative.

    ⸻

    🧑‍🎨 6. Uniformisation du rendu des images # ( 🧙‍♂️ qu il puisse afficher plusieurs type de format d image)
        •	Création du fichier image_helper.dart avec :

    Widget buildImage(String imageUrl, ...) => imageUrl.startsWith('http')
        ? Image.network(...)
        : Image.asset(...);


        •	Suppression de la logique startsWith('http') répétée dans chaque écran.

    ⸻

    ✅ Résultat actuel :
        •	Plus aucun restaurant défini en dur dans les fichiers d’UI.
        •	Source unique des données : restaurants.json.
        •	Affichage dynamique basé sur un repository modulaire.
        •	Utilisation centralisée des images réseau ou locales.
        •	UI scalable, testable, et facile à maintenir.

🧚l arbre des données: assets
                        ├── data
                        │   └── restaurants.json
                        └── images
                            ├── Burger Tama.png
                            ├── Cherry Healthy.png
                            ├── Healthy Noodle.png
                            ├── Hourglass.gif
                            ├── Loading-bar.gif
                            ├── delivery_in_progress.png
                            ├── empty_order.png
                            ├── loading_anim.gif
                            ├── logo.png
                            ├── pizza.png
                            ├── success_order.png
                            ├── sushi.png
                            ├── table_a_manger.png
                            └── tacos.png


jusqu’à présent dans la liste des Prédictions 🔮 ,
on a mis en place les base pour 🧠 hydrated_bloc  donc
    ✅1.	🧠 Persistance locale du panier (hydrated_bloc ou shared_preferences)



 🧍‍♀️euh  🧌:
    j ai rajouter un mode sombre, c est pas le plus important mais voila , en plus il est pris en charge pas flutter , 
    mon idée de base etait juste d avoir un bool qui sert le verification mais cette idée ne permet pas l automatisation  
    et ne ol applique pas sur tout et ne modifie pas le text, doucoup on a crée un autre fichier 

    ducoup voila l'arbre 


🧙‍♂️🫸l instant l arbre : lib
                        ├── RestaurantRepository.dart
                        ├── core
                        │   ├── bloc
                        │   │   └── cart
                        │   │       ├── cart_bloc.dart
                        │   │       ├── cart_event.dart
                        │   │       └── cart_state.dart
                        │   ├── models
                        │   │   ├── cart_item.dart
                        │   │   ├── order.dart
                        │   │   ├── restaut.dart
                        │   │   └── restaut.g.dart
                        │   ├── order_repository.dart
                        │   └── providers 🟢
                        │       └── theme_provider.dart 🟢<---- mode sombre
                        ├── image_helper.dart
                        ├── main.dart
                        ├── note_en_gros.txt
                        ├── restaurant_data.dart
                        ├── screens
                        │   ├── add_card_screen.dart
                        │   ├── cart_screen.dart
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   ├── success_sign_up_screen.dart
                        │   └── tracking_screen.dart
                        └── widgets
                            └── custom_text_field.dart

Ajoute de Firebase:
    ⸻

    ✅ Objectif : Connecter ton app Flutter à Firebase proprement

    Pour permettre une gestion distante des données (restos, users, commandes, etc.).

    ⸻

    ⚙️ 1. Création & Configuration Firebase
        •	🔥 Tu as créé un projet Firebase appelé foodmarket-6fdce.
        •	✅ Tu as ajouté une application Android (com.example.food_app) et iOS (com.example.foodApp).
        •	🧪 Tu avais d’abord coché à tort Web/MacOS/Windows → tu as reconfiguré proprement avec seulement Android & iOS ✔️.

    ⸻

    🧠 2. Génération automatique du fichier Firebase
        •	Fichier généré automatiquement par la commande flutterfire configure :

    lib/firebase_options.dart

    Ce fichier contient toutes les clés d’accès Firebase pour Android et iOS.

    ⸻

    🛠️ 3. Prochaine étape (optionnelle selon tes besoins)

    Tu peux désormais utiliser Firebase pour :

    Service	Utilité	Package Flutter
    🔐 Auth	Login/Signup utilisateurs	firebase_auth
    ☁️ Firestore	Stocker/restaurer les restaurants, commandes, users	cloud_firestore
    📸 Storage	Stocker les photos de profil/restos en ligne	firebase_storage
    🔔 Notifications	Notifications push	firebase_messaging


    ⸻

🧙‍♂️🫸l instant l arbre : lib
                        ├── RestaurantRepository.dart
                        ├── core
                        │   ├── bloc
                        │   │   └── cart
                        │   │       ├── cart_bloc.dart
                        │   │       ├── cart_event.dart
                        │   │       └── cart_state.dart
                        │   ├── models
                        │   │   ├── cart_item.dart
                        │   │   ├── order.dart
                        │   │   ├── restaut.dart
                        │   │   └── restaut.g.dart
                        │   ├── order_repository.dart
                        │   └── providers
                        │       └── theme_provider.dart
                        ├── firebase_options.dart 🟢 (y en a d'autre en dehors de lib)
                        ├── image_helper.dart
                        ├── main.dart
                        ├── note_en_gros.txt
                        ├── restaurant_data.dart
                        ├── screens
                        │   ├── add_card_screen.dart
                        │   ├── cart_screen.dart
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   ├── success_sign_up_screen.dart
                        │   └── tracking_screen.dart
                        └── widgets
                            └── custom_text_field.dart


wow comment y avais un probleme dans li'indentation 😒
bref c est bon l'app marche plutot bien avec le mode sombre, j ai pas encore declencher firebase 