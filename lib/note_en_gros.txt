
🏃‍♀️‍➡️
💁:    bon je te fais un recap de tout c que j ai fais, 
"👾 Voici un récapitulatif clair et structuré de tout ce qui a été fait jusqu’à présent dans ton projet Flutter “FoodMarket”, depuis l’installation jusqu’au splash screen :
🧙‍♂️1er jour 
    ⸻

    🧰 Installation et configuration

    ✔️ Environnement de développement
        •	Installation de Flutter + Dart sur macOS
        •	Installation de Android Studio (avec émulateur Android fonctionnel)
        •	Installation de Xcode (pour support iOS)
        •	Installation de CocoaPods
        •	Résolution de problèmes liés à Ruby / Pod / PATH
        •	Vérification avec flutter doctor

    ✔️ Flutter desktop et web
        •	Activation du support macOS : flutter config --enable-macos-desktop
        •	Projet Flutter détecte maintenant : Android, macOS, et Chrome

    ⸻

    📁 Structure du projet
        •	Création du projet food_app
        •	Ajout de fichiers dans lib/ :
        •	main.dart (point d’entrée principal)
        •	widgets_lab.dart (pour tester les widgets Flutter)
        •	brouillon.dart (espace libre d’expérimentation)

    ⸻

    🧪 Tests & compréhension Flutter

    ✔️ Widgets fondamentaux testés :
        •	StatelessWidget, StatefulWidget
        •	Row, Column, Container, Text, Icon
        •	GestureDetector, Expanded, Flexible, SizedBox, etc.

    ✔️ Concepts compris :
        •	Widgets = blocs de construction UI (comme en React Native)
        •	Hot reload vs Hot restart
        •	Structure du main.dart (via MaterialApp, Scaffold, build())

    ⸻

    🧑‍💻 Utilisation de GitHub 💥 mais bon jai abondonner c est chiant (kayn hein mais il est pas a jour)
        •	Création du repo : flutter-order-app
        •	Push initial depuis terminal
        •	Création d’une branche dédiée test-widgets
        •	Navigation entre branches (git checkout test-widgets, git checkout main)

    ⸻

    🎨 Début de la maquette Figma

    ✔️ Pages observées :
        •	Splash (logo + nom FoodMarket)
        •	Sign In
        •	Sign Up
        •	Sign Up + Photo

    ✔️ Couleurs & branding :
        •	Fond rouge #FF002B
        •	Logo blanc (nom + icône de magasin)
        •	Style moderne, épuré

    ⸻

    🖼️ Ajout du logo FoodMarket
        •	Création du dossier assets/images
        •	Ajout de l’image logo.png
        •	Configuration dans pubspec.yaml :

    flutter:
    assets:
        - assets/images/logo.png


        •	Affichage du logo et texte sur un SplashScreen personnalisé via Image.asset() + Text()

    " 🧍‍♀️ voila ça c etait step 1 : instalations


---------------------------------------------------------------------------------------------
🫸definition🫷 🌝 :
    🧩 Un widget, c’est quoi en Flutter ? 🧙‍♂️

    Un widget est l’unité de base de l’interface utilisateur (UI) dans Flutter.

    Tout ce que tu vois à l’écran dans une app Flutter est un widget :
        •	Un Text est un widget
        •	Un Container est un widget
        •	Un Row, Column, Button, Image, Scaffold, etc. → tous des widgets

    👾"C’est comme du LEGO UI : tu construis ton écran en combinant des widgets."
------------------

EXAMPLE-widget (step2)🧞:
    Excellent choix, voici une explication claire et un exemple minimal pour chacun des widgets que tu as listés.

    ⸻

    ✅ 1. StatelessWidget
        •	Définition : Widget immuable, ne change jamais une fois construit.

    class MyText extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
        return Text("Je ne change jamais");
    }
    }


    ⸻

    ✅ 2. StatefulWidget
        •	Définition : Widget avec un état interne qui peut changer.

    class CounterWidget extends StatefulWidget {
    @override
    State<CounterWidget> createState() => _CounterWidgetState();
    }

    class _CounterWidgetState extends State<CounterWidget> {
    int count = 0;

    @override
    Widget build(BuildContext context) {
        return ElevatedButton(
        onPressed: () => setState(() => count++),
        child: Text("Compteur: $count"),
        );
    }
    }


    ⸻

    ✅ 3. Row
        •	Définition : Dispose ses enfants horizontalement.

    Row(
    children: [
        Icon(Icons.star),
        Text("5 étoiles"),
    ],
    )


    ⸻

    ✅ 4. Column
        •	Définition : Dispose ses enfants verticalement.

    Column(
    children: [
        Text("Ligne 1"),
        Text("Ligne 2"),
    ],
    )


    ⸻

    ✅ 5. SizedBox
        •	Définition : Crée un espacement ou une boîte de taille fixe.

    SizedBox(height: 16),


    ⸻

    ✅ 6. Container
        •	Définition : Boîte multifonction : padding, margin, background, border…

    Container(
    padding: EdgeInsets.all(16),
    color: Colors.red,
    child: Text("Contenu"),
    )


    ⸻

    ✅ 7. SingleChildScrollView
        •	Définition : Rend un enfant scrollable.

    SingleChildScrollView(
    child: Column(
        children: [Text("Loooooong contenu...")],
    ),
    )


    ⸻

    ✅ 8. Padding
        •	Définition : Ajoute de l’espace interne autour d’un widget.

    Padding(
    padding: EdgeInsets.all(16),
    child: Text("Avec du padding"),
    )


    ⸻

    ✅ 9. Align
        •	Définition : Positionne un enfant selon un alignement.

    Align(
    alignment: Alignment.bottomRight,
    child: Text("En bas à droite"),
    )


    ⸻

    ✅ 10. Text
        •	Définition : Affiche une chaîne de caractères.

    Text("Ceci est un texte"),


    ⸻

    ✅ 11. Icon
        •	Définition : Affiche une icône du Material Design.

    Icon(Icons.favorite, color: Colors.red),


    ⸻

    ✅ 12. Stack
        •	Définition : Superpose les widgets (comme des calques).

    Stack(
    children: [
        Image.asset("fond.jpg"),
        Positioned(
        bottom: 20,
        right: 20,
        child: Text("En haut de l’image"),
        ),
    ],
    )


    ⸻

    ✅ 13. Positioned
        •	Définition : Doit être utilisé dans un Stack, positionne précisément un enfant.

    Positioned(
    top: 10,
    left: 10,
    child: Text("Placée en haut à gauche"),
    )


    ⸻

    ✅ 14. GestureDetector
        •	Définition : Capture des gestes (tap, double tap, drag, etc.)

    GestureDetector(
    onTap: () => print("Appuyé"),
    child: Container(color: Colors.blue, height: 100, width: 100),
    )


    ⸻

    ✅ 15. Expanded
        •	Définition : Remplit l’espace restant dans un Row/Column.

    Row(
    children: [
        Expanded(child: Container(color: Colors.red)),
        Container(width: 50, color: Colors.green),
    ],
    )


    ⸻

    ✅ 16. Flexible
        •	Définition : Semblable à Expanded mais plus souple (peut ne pas remplir tout l’espace).

    Flexible(
    flex: 2,
    child: Container(color: Colors.blue),
    )


    ⸻

    ✅ 17. Navigator.push
        •	Définition : Permet de naviguer vers une autre page.

    Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => AnotherScreen()),
    );


    ⸻



---------------------------------------------------------------------------------------------
🧙‍♂️❕REMARQUE: ça a pas marche avec xcode , faut attendre un wifi stable 🫷-_-🫸




---------------------------------------------------------------------------------------------
🧙‍♂️ : RECAP STEP2 
    👾:⸻

    🔁 RÉCAPITULATIF COMPLET DU FLOW UTILISATEUR

    ⸻

    🧱 STRUCTURE TECHNIQUE

    Dossier lib/ contient :🌳

    lib/
    ├── main.dart                  🔁 Point d’entrée + routing
    ├── screens/                  📱 Tous les écrans
    │   ├── splash_screen.dart      🔸 Logo FoodMarket + redirection
    │   ├── sign_in_screen.dart     🔸 Connexion
    │   ├── sign_up_screen.dart     🔸 Inscription
    │   └── home_screen.dart        🔸 Écran d’accueil final
    ├── widgets/
    │   └── custom_text_field.dart  🔹 Champ formulaire réutilisable
    └── note-en-gros.txt          📝 Tes remarques perso

    ⸻

    ⚙️ COMPORTEMENT LOGIQUE

    1. main.dart
        •	Configure l’app
        •	Déclare les routes (/home)
        •	Définit le point de départ : SplashScreen

    home: const SplashScreen(),
    routes: {
    '/home': (context) => const HomeScreen(),
    }


    ⸻

    2. splash_screen.dart
        •	Affiche logo.png + texte
        •	Attends 2 secondes
        •	Redirige automatiquement vers SignInScreen

    Future.delayed(Duration(seconds: 2), () {
    Navigator.pushReplacement(... SignInScreen());
    });


    ⸻

    3. sign_in_screen.dart
        •	UI pour se connecter
        •	Lien “Create an account” ➡️ va vers SignUpScreen
        •	Pas encore connecté à une vraie base (Firebase)

    ⸻

    4. sign_up_screen.dart
        •	UI d’inscription (nom, email, mot de passe)
        •	Bouton “Continue” redirige vers /home
        •	Utilise CustomTextField

    Navigator.pushReplacementNamed(context, '/home');


    ⸻

    5. home_screen.dart
        •	Écran d’accueil
        •	Montre texte “Bienvenue”
        •	Pour l’instant statique → servira de point d’entrée post-login plus tard

    ⸻

    6. custom_text_field.dart
        •	Widget pour ne pas dupliquer le code des champs
        •	Reçoit un label, un hint, et un booléen obscure

    ⸻

    ✅ EN RÉSUMÉ

    Tu as construit une app Flutter multi-écrans avec navigation complète :

    Splash → SignIn → SignUp → Home

    Et tout repose sur :
    🧱 Widgets + Navigation + Routage propre

    ⸻


---------------------------------------------------------------------------------------------




#🧙‍♂️ recap du deuxieme jour:

    ⸻

    📦 Structure actuelle du projet 🌳


    🧙‍♂️🫸l instant l arbre : lib/
                            ├── main.dart
                            ├── core/
                            │   └── models/
                            │       └── restaut.dart           ✅ Modèle de restaurant
                            ├── screens/
                            │   ├── splash_screen.dart         ✅ Affichage initial (logo)
                            │   ├── sign_in_screen.dart        ✅ Écran de connexion
                            │   ├── sign_up_screen.dart        ✅ Écran d’inscription
                            │   ├── home_screen.dart           ✅ Accueil avec bouton pour voir les restaurants
                            │   ├── restaut_list_screen.dart   ✅ Liste des restaurants
                            │   └── restaut_detail_screen.dart ✅ Détails d’un restaurant sélectionné
                            ├── widgets/
                            │   └── custom_text_field.dart     ✅ Champ de texte réutilisable
                            └── note-en-gros.txt               ✅ (fichier de notes personnelles)



    ⸻

    🧱 Fonctionnalités principales

    Fonction	                Description
    SplashScreen	            Affiche le logo + nom pendant 2s avant d’aller vers l’écran de connexion
    SignInScreen	            Formulaire de connexion (visuel uniquement)
    SignUpScreen	            Formulaire d’inscription (visuel uniquement)
    HomeScreen	                Affiche un bouton pour accéder à la liste des restaurants
    RestautListScreen	        Affiche une liste de restaurants avec image, nom, note et prix
    RestautDetailScreen	        Montre les détails complets du restaurant sélectionné
    CustomTextField	            Widget personnalisé pour styliser les champs de texte


    ⸻

    🛠️ Techniques utilisées
        •	✅ Navigation Flutter via Navigator.push et pushReplacement
        •	✅ MaterialApp avec routes nommées
        •	✅ Utilisation de ListView.builder pour une liste dynamique
        •	✅ Passage de données entre écrans (objet Restaut)
        •	✅ Modèle Restaut avec image, nom, description, rating et prix
        •	✅ Structure scalable pour ajouter facilement du state management (Bloc, etc.)

    ⸻
    ***
    🧪 Prochaines pistes
        •	Intégrer un vrai backend ou base de données
        •	Ajouter un écran de commande (order_screen.dart)
        •	Implémenter la gestion des états avec BLoC
        •	Gérer l’authentification réelle (Firebase par exemple)
        •	Ajouter des images locales et une meilleure gestion des assets
    ***
    ⸻ EN GROS LE backend


---------------------------------------------------------------------------------------------
🫸definition🫷 🌝
    Le backend désigne tout ce qui se passe côté serveur, 
    en arrière-plan d’une application. C’est l’ensemble des outils, bases de données, APIs, logiques métier qui font fonctionner ton application mais que l’utilisateur ne voit pas directement.
    En gros:
     "Le backend, c’est le cerveau de ton application. Il traite les données, applique la logique métier, et fournit les résultats à l’interface utilisateur (le frontend, ici Flutter)."

    ‼️"la gestion de la base de donnéesfait entièrement partie du backend"⁉️

Etape3 : la gestion de la base de données .
	1.	Vérifie si l’email existe déjà.
	2.	Hash le mot de passe.
	3.	Stocke les infos dans la base de données.


👾❕REMARQUE:
    Quand un fichier apparaît en vert dans Visual Studio Code (VS Code), cela signifie généralement que :

    👉 Le fichier est nouveau (ajouté récemment) et non encore validé (commité) dans Git.

    Détail :
        •	VS Code utilise des couleurs pour refléter l’état Git d’un fichier :
        •	🟢 Vert : fichier ajouté mais pas encore commité (git add, mais pas encore git commit)
        •	🟡 Jaune/orange (ou U pour “Untracked”) : fichier non suivi par Git (tu ne l’as pas encore fait git add)
        •	🔵 Bleu : fichier modifié (déjà dans Git, mais son contenu a changé depuis le dernier commit)
        •	❌ Rouge (rare) : fichier supprimé

    Que faire si tu veux qu’il ne soit plus vert :
        1.	Tu fais :

    git add nom_du_fichier
    git commit -m "Ajout du fichier"

    ou dans l’interface Git de VS Code, tu peux staguer et commiter le fichier via l’onglet “Source Control”.

---------------------------------------------------------------------------------------------

3 eme jour,
    j avais reussi a ouvrir le simulateur apple , genre un iphone , (wlh j ai meme une video) mais j ai oublier de noté comment j avais fait ducoup j ai oublier et 
    j ai perdu le simulateur ios, des que je trouve comment je note directement
    

🧙‍♂️🫸l instant l arbre : lib/
                        ├── core/
                        │   ├── bloc/
                        │   ├── cart_repository.dart     ✅ LOGIQUE DE PANIER
                        │   └── models/
                        │       ├── cart_item.dart       ✅ MODÈLE ITEM PANIER
                        │       └── restaut.dart
                        ├── screens/
                        │   ├── cart_screen.dart         ✅ NOUVELLE PAGE PANIER
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart         ✅ NAVIGATION BOTTOM
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart ✅ AJOUT PANIER
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   └── success_sign_up_screen.dart
                        ├── widgets/
                        │   └── custom_text_field.dart
                        ├── main.dart
                        └── note_en_gros.txt



---------------------------------------------------------------------------------------------


4 eme jour 🙂‍↕️
    ⸻

    ✅ 1. Gestion du Profil avec Avatar
        •	Implémentation de 3 choix pour l’image de profil :
        •	📸 Prendre une photo (caméra)
        •	🖼️ Choisir depuis la galerie
        •	🧑‍🎨 Choisir une icône par défaut
        •	Stockage temporaire de l’image ou de l’icône dans l’état local.

    ⸻

    ✅ 2. Permissions iOS

    Ajout des permissions nécessaires dans ios/Runner/Info.plist :

    <key>NSCameraUsageDescription</key>
    <string>Besoin d’accéder à la caméra pour prendre une photo de profil</string>
    <key>NSPhotoLibraryUsageDescription</key>
    <string>Besoin d’accéder à la galerie pour choisir une photo</string>


    ⸻

    ✅ 3. CartRepository (panier global)
        •	Création d’un CartRepository avec ChangeNotifier.
        •	Ajout/suppression de plats dans le panier.
        •	Suivi du nombre total d’articles.

    ⸻

    ✅ 4. Provider pour le panier
        •	Ajout du package provider: ^6.0.0 dans pubspec.yaml.
        •	Wrappé ton FoodMarketApp avec ChangeNotifierProvider<CartRepository> dans main.dart.

    ⸻

    ✅ 5. Notification sur l’icône du panier
        •	Mise en place d’un badge rouge (🔴) quand des articles sont dans le panier et que l’utilisateur n’a pas encore consulté l’onglet Cart.
        •	Disparition automatique du badge dès que l’utilisateur ouvre l’onglet Cart.

    ⸻

    ✅ 6. Mise à jour dynamique du badge
        •	Ajout d’un listener sur CartRepository dans MainScreen pour détecter toute modification du panier.
        •	Si une modification est détectée et que l’utilisateur n’est pas dans Cart, alors hasNew = true.

    ⸻

    ✅ 7. Correction de bugs
        •	Correction de :
        •	Erreurs de syntaxe dans pubspec.yaml (clé dupliquée, indentation).
        •	Mauvais import de CartRepository.
        •	Mauvais usage du mot-clé const.
        •	Suppression d’un cclass → class.
        •	Nettoyage de build.gradle.kts pour le NDK version.

    ⸻

    ✅ 8. Navigation et Structure
        •	Écran principal MainScreen avec BottomNavigationBar :
        •	🏬 Order
        •	🛒 Cart
        •	👤 Profile

    ⸻

    Si tu veux, je peux maintenant t’aider à :
        •	Persister les données du panier localement
        •	Envoyer les commandes à un backend
        •	Ajouter des animations ou un onboarding
        •	Ajouter Firebase / authentification
        •	Améliorer la structure du projet avec un Service Layer

    