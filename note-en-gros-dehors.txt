
j vais mettre ici les code que j ai supprimer au cas ou,

plan d attaque qu on va mettre en place :
        Étape                       Action                          Résultat
        1             Supprimer CartRepository               Plus de Provider
        2               Créer CartBloc + états + événements         Gestion centralisée de l’état panier
        3                   Injecter Bloc dans main.dart            Bloc disponible partout
        4                           Mettre à jour écrans            Appels à add, remove deviennent BlocEvents
        5                       Adopter BlocBuilder dans UI         UI reactive et découplée
        6                      Réviser order/tracking_screen        Utilisation harmonisée de l’état
        7                  Supprimer/redéployer OrderRepository         Code nettoyé



donc pour la premiere etape : 
    "supprimer CartRepository" 
    lib
    ├── core
    │   ├── bloc
    │   │   └── cart
    │   │       ├── cart_bloc.dart
    │   │       ├── cart_event.dart
    │   │       └── cart_state.dart
    │   ├── cart_repository.dart.  <---------💥Lui là voila son contenue pour pas le perdre
    │   ├── models
    │   │   ├── cart_item.dart
    │   │   ├── order.dart
    │   │   └── restaut.dart
    │   └── order_repository.dart
    ├── main.dart
    ├── note_en_gros.txt
    ├── screens
    │   ├── add_card_screen.dart
    │   ├── cart_screen.dart
    │   ├── home_screen.dart
    │   ├── main_screen.dart
    │   ├── order_screen.dart
    │   ├── profile_screen.dart
    │   ├── restaut_detail_screen.dart
    │   ├── restaut_list_screen.dart
    │   ├── sign_in_screen.dart
    │   ├── sign_up_screen.dart
    │   ├── splash_screen.dart
    │   ├── success_sign_up_screen.dart
    │   └── tracking_screen.dart
    └── widgets
        └── custom_text_field.dart


le code de 
cart_repository.dart :
    import 'models/cart_item.dart';
    import 'models/restaut.dart';
    import 'package:flutter/foundation.dart';
    import 'package:provider/provider.dart';

    class CartRepository extends ChangeNotifier {
    static final CartRepository _instance = CartRepository._internal();
    factory CartRepository() => _instance;
    CartRepository._internal();

    final List<CartItem> _items = [];

    List<CartItem> get items => List.unmodifiable(_items);

    // Ajoute un plat au panier (en incrémentant la quantité si déjà présent)
    void add(Restaut resto) {
        final index = _items.indexWhere((item) => item.resto.name == resto.name);

        if (index != -1) {
        final existing = _items[index];
        _items[index] = CartItem(
            resto: existing.resto,
            quantity: existing.quantity + 1,
        );
        } else {
        _items.add(CartItem(resto: resto));
        }
        notifyListeners();
    }

    // Supprime un plat du panier
    void remove(Restaut resto) {
        final index = _items.indexWhere((item) => item.resto.name == resto.name);
        if (index != -1) {
        final existing = _items[index];
        if (existing.quantity > 1) {
            _items[index] = CartItem(
            resto: existing.resto,
            quantity: existing.quantity - 1,
            );
        } else {
            _items.removeAt(index);
        }
        }
        notifyListeners();
    }

    // Vide complètement le panier
    void clear() {
        _items.clear();
        notifyListeners();
    }

    // Retourne le nombre total d'éléments dans le panier
    int get count => _items.fold(0, (total, item) => total + item.quantity);

    // 💸 Nouveau getter ajouté ici :
    double get totalPrice => _items.fold(
        0.0, (total, item) => total + item.quantity * item.resto.price);
    }
---------------------------------------------------------------------------------------------
on a pris une autre direction totalement finalement paceque flemme :
    🔁 Remplacement du JSON local
	•	Avant : Les restaurants étaient codés en dur dans un fichier local assets/data/restaurants.json.
	•	Maintenant : Les données sont récupérées en direct depuis Google Sheets (format CSV publié en ligne).

    ⸻

    🧠 Nouvelle architecture
        •	google_sheet_service.dart
    → Récupère le CSV depuis l’URL Google Sheets
    → Parse les lignes CSV en une liste de Map<String, String>
        •	RestaurantRepository.dart
    → Transforme ces maps en objets Restaut
    → Sert d’interface unique pour accéder à la liste de restaurants
    ⸻

    ✅ Résultat final
        •	📱 Appli Flutter complète (affichage, navigation, panier, commandes)
        •	🔗 Données dynamiques et distantes via Google Sheets
        •	🔒 Zéro backend nécessaire
        •	⚙️ Maintenance ultra simple → Juste modifier le tableau Google Sheets


🧙‍♂️🫸l instant l arbre : lib                             
                        ├── RestaurantRepository.dart
                        ├── core
                        │   ├── bloc
                        │   │   └── cart
                        │   │       ├── cart_bloc.dart
                        │   │       ├── cart_event.dart
                        │   │       └── cart_state.dart
                        │   ├── models
                        │   │   ├── cart_item.dart
                        │   │   ├── order.dart
                        │   │   ├── restaut.dart
                        │   │   └── restaut.g.dart
                        │   ├── order_repository.dart
                        │   ├── providers
                        │   │   └── theme_provider.dart
                        │   └── services
                        │       └── google_sheet_service.dart. <---- backend
                        ├── firebase_options.dart
                        ├── image_helper.dart
                        ├── main.dart
                        ├── note_en_gros.txt
                        ├── restaurant_data.dart
                        ├── screens
                        │   ├── add_card_screen.dart
                        │   ├── cart_screen.dart
                        │   ├── home_screen.dart
                        │   ├── main_screen.dart
                        │   ├── order_screen.dart
                        │   ├── profile_screen.dart
                        │   ├── restaut_detail_screen.dart
                        │   ├── restaut_list_screen.dart
                        │   ├── sign_in_screen.dart
                        │   ├── sign_up_screen.dart
                        │   ├── splash_screen.dart
                        │   ├── success_sign_up_screen.dart
                        │   └── tracking_screen.dart
                        └── widgets
                            └── custom_text_field.dart

