
j vais mettre ici les code que j ai supprimer au cas ou,

plan d attaque qu on va mettre en place :
        Ã‰tape                       Action                          RÃ©sultat
        1             Supprimer CartRepository               Plus de Provider
        2               CrÃ©er CartBloc + Ã©tats + Ã©vÃ©nements         Gestion centralisÃ©e de lâ€™Ã©tat panier
        3                   Injecter Bloc dans main.dart            Bloc disponible partout
        4                           Mettre Ã  jour Ã©crans            Appels Ã  add, remove deviennent BlocEvents
        5                       Adopter BlocBuilder dans UI         UI reactive et dÃ©couplÃ©e
        6                      RÃ©viser order/tracking_screen        Utilisation harmonisÃ©e de lâ€™Ã©tat
        7                  Supprimer/redÃ©ployer OrderRepository         Code nettoyÃ©



donc pour la premiere etape : 
    "supprimer CartRepository" 
    lib
    â”œâ”€â”€ core
    â”‚Â Â  â”œâ”€â”€ bloc
    â”‚Â Â  â”‚Â Â  â””â”€â”€ cart
    â”‚Â Â  â”‚Â Â      â”œâ”€â”€ cart_bloc.dart
    â”‚Â Â  â”‚Â Â      â”œâ”€â”€ cart_event.dart
    â”‚Â Â  â”‚Â Â      â””â”€â”€ cart_state.dart
    â”‚Â Â  â”œâ”€â”€ cart_repository.dart.  <---------ðŸ’¥Lui lÃ  voila son contenue pour pas le perdre
    â”‚Â Â  â”œâ”€â”€ models
    â”‚Â Â  â”‚Â Â  â”œâ”€â”€ cart_item.dart
    â”‚Â Â  â”‚Â Â  â”œâ”€â”€ order.dart
    â”‚Â Â  â”‚Â Â  â””â”€â”€ restaut.dart
    â”‚Â Â  â””â”€â”€ order_repository.dart
    â”œâ”€â”€ main.dart
    â”œâ”€â”€ note_en_gros.txt
    â”œâ”€â”€ screens
    â”‚Â Â  â”œâ”€â”€ add_card_screen.dart
    â”‚Â Â  â”œâ”€â”€ cart_screen.dart
    â”‚Â Â  â”œâ”€â”€ home_screen.dart
    â”‚Â Â  â”œâ”€â”€ main_screen.dart
    â”‚Â Â  â”œâ”€â”€ order_screen.dart
    â”‚Â Â  â”œâ”€â”€ profile_screen.dart
    â”‚Â Â  â”œâ”€â”€ restaut_detail_screen.dart
    â”‚Â Â  â”œâ”€â”€ restaut_list_screen.dart
    â”‚Â Â  â”œâ”€â”€ sign_in_screen.dart
    â”‚Â Â  â”œâ”€â”€ sign_up_screen.dart
    â”‚Â Â  â”œâ”€â”€ splash_screen.dart
    â”‚Â Â  â”œâ”€â”€ success_sign_up_screen.dart
    â”‚Â Â  â””â”€â”€ tracking_screen.dart
    â””â”€â”€ widgets
        â””â”€â”€ custom_text_field.dart



cart_repository.dart :
    import 'models/cart_item.dart';
    import 'models/restaut.dart';
    import 'package:flutter/foundation.dart';
    import 'package:provider/provider.dart';

    class CartRepository extends ChangeNotifier {
    static final CartRepository _instance = CartRepository._internal();
    factory CartRepository() => _instance;
    CartRepository._internal();

    final List<CartItem> _items = [];

    List<CartItem> get items => List.unmodifiable(_items);

    // Ajoute un plat au panier (en incrÃ©mentant la quantitÃ© si dÃ©jÃ  prÃ©sent)
    void add(Restaut resto) {
        final index = _items.indexWhere((item) => item.resto.name == resto.name);

        if (index != -1) {
        final existing = _items[index];
        _items[index] = CartItem(
            resto: existing.resto,
            quantity: existing.quantity + 1,
        );
        } else {
        _items.add(CartItem(resto: resto));
        }
        notifyListeners();
    }

    // Supprime un plat du panier
    void remove(Restaut resto) {
        final index = _items.indexWhere((item) => item.resto.name == resto.name);
        if (index != -1) {
        final existing = _items[index];
        if (existing.quantity > 1) {
            _items[index] = CartItem(
            resto: existing.resto,
            quantity: existing.quantity - 1,
            );
        } else {
            _items.removeAt(index);
        }
        }
        notifyListeners();
    }

    // Vide complÃ¨tement le panier
    void clear() {
        _items.clear();
        notifyListeners();
    }

    // Retourne le nombre total d'Ã©lÃ©ments dans le panier
    int get count => _items.fold(0, (total, item) => total + item.quantity);

    // ðŸ’¸ Nouveau getter ajoutÃ© ici :
    double get totalPrice => _items.fold(
        0.0, (total, item) => total + item.quantity * item.resto.price);
    }